import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVR
from sklearn.metrics import accuracy_score, mean_squared_error
import matplotlib.pyplot as plt

# Load the dataset
file_path = '/content/drive/MyDrive/soil.csv'  # Update with the correct path
data = pd.read_csv(file_path)

# Extracting features (pH, P ppm, B ppm, O.M. %) and target variable (contaminated)
X = data[['pH', 'P ppm', 'B ppm', 'O.M. %']]
y = data['contaminated']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# K-Nearest Neighbors (KNN)
knn_model = KNeighborsClassifier(n_neighbors=5)
knn_model.fit(X_train_scaled, y_train)
knn_predictions = knn_model.predict(X_test_scaled)

# Support Vector Regression (SVR)
svr_model = SVR(kernel='linear')
svr_model.fit(X_train_scaled, y_train)
svr_predictions = svr_model.predict(X_test_scaled)

# Calculate accuracy for KNN
knn_accuracy = accuracy_score(y_test, knn_predictions) * 100

# Calculate accuracy for SVR
# Assuming SVR predictions are rounded to 0 or 1 for binary classification
svr_accuracy = accuracy_score(y_test, np.round(svr_predictions)) * 100

# Plotting the comparison
labels = ['KNN', 'SVR']
accuracies = [knn_accuracy, svr_accuracy]

plt.bar(labels, accuracies, color=['blue', 'orange'])
plt.ylabel('Accuracy (%)')
plt.title('KNN vs SVR Accuracy Comparison')
plt.ylim([0, 100])
plt.show()

print(f'KNN Accuracy: {knn_accuracy:.2f}%')
print(f'SVR Accuracy: {svr_accuracy:.2f}%')
